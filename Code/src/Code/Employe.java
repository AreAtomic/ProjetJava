package Code;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.Objects;import static java.nio.file.StandardOpenOption.APPEND;public abstract class Employe implements Comparable<Employe>,Payable {    protected String id;    protected String nom;    protected String prenom;    protected int matricule;    protected float indiceSalaire;    //CONSTANTE DE SALAIRE    public final int INDICE_SALAIRE=12;    public Employe(String id, String nom, String prenom, int matricule, float indiceSalaire) {        this.id = id;        this.nom = nom;        this.prenom = prenom;        this.matricule = matricule;        this.indiceSalaire = indiceSalaire;    }    @Override    public String toString() {        return  id + " :"+                " nom :'" + nom + '\'' +                ", prenom :'" + prenom + '\'' +                ", matricule :" + matricule +                ", indiceSalaire: " + indiceSalaire;    }    public String getNom() {        return nom;    }    public String getPrenom() {        return prenom;    }    public int getMatricule() {        return matricule;    }    public float getIndiceSalaire() {        return indiceSalaire;    }    public String getId() {        return id;    }    public void setId(String id) {        this.id = id;    }    public void setNom(String nom) {        this.nom = nom;    }    public void setPrenom(String prenom) {        this.prenom = prenom;    }    public void setMatricule(int matricule) {        this.matricule = matricule;    }    public void setIndiceSalaire(float indiceSalaire) {        this.indiceSalaire = indiceSalaire;    }    @Override    public int compareTo(Employe o) {        if(this.matricule == (o.matricule)){            return 0;        }        if(this.id.charAt(1) < o.id.charAt(1)){            return 1;        }        if(this.id.charAt(1) == o.id.charAt(1)){            if(this.id.length() < o.id.length()){                return 1;            }else if(this.id.length() == o.id.length()){                if(this.id.charAt(id.length()-1)< o.id.charAt(id.length()-1)){                    return -1;                }                return 1;            }        }else{            return 1;        }        return 1;    }    @Override    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        Employe employe = (Employe) o;        return matricule == employe.matricule &&                id.equals(employe.id);    }    @Override    public int hashCode() {        return Objects.hash(id, nom, prenom, matricule, indiceSalaire, INDICE_SALAIRE);    }}